# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'WrongRGBvaluesException' not in _M_SmartHome.__dict__:
    _M_SmartHome.WrongRGBvaluesException = Ice.createTempClass()
    class WrongRGBvaluesException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::WrongRGBvaluesException'

    _M_SmartHome._t_WrongRGBvaluesException = IcePy.defineException('::SmartHome::WrongRGBvaluesException', WrongRGBvaluesException, (), False, None, ())
    WrongRGBvaluesException._ice_type = _M_SmartHome._t_WrongRGBvaluesException

    _M_SmartHome.WrongRGBvaluesException = WrongRGBvaluesException
    del WrongRGBvaluesException

if 'InvalidOvenModeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidOvenModeException = Ice.createTempClass()
    class InvalidOvenModeException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidOvenModeException'

    _M_SmartHome._t_InvalidOvenModeException = IcePy.defineException('::SmartHome::InvalidOvenModeException', InvalidOvenModeException, (), False, None, ())
    InvalidOvenModeException._ice_type = _M_SmartHome._t_InvalidOvenModeException

    _M_SmartHome.InvalidOvenModeException = InvalidOvenModeException
    del InvalidOvenModeException

if 'WrongTemperaturevaluesException' not in _M_SmartHome.__dict__:
    _M_SmartHome.WrongTemperaturevaluesException = Ice.createTempClass()
    class WrongTemperaturevaluesException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::WrongTemperaturevaluesException'

    _M_SmartHome._t_WrongTemperaturevaluesException = IcePy.defineException('::SmartHome::WrongTemperaturevaluesException', WrongTemperaturevaluesException, (), False, None, ())
    WrongTemperaturevaluesException._ice_type = _M_SmartHome._t_WrongTemperaturevaluesException

    _M_SmartHome.WrongTemperaturevaluesException = WrongTemperaturevaluesException
    del WrongTemperaturevaluesException

if 'ChangeStateException' not in _M_SmartHome.__dict__:
    _M_SmartHome.ChangeStateException = Ice.createTempClass()
    class ChangeStateException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::ChangeStateException'

    _M_SmartHome._t_ChangeStateException = IcePy.defineException('::SmartHome::ChangeStateException', ChangeStateException, (), False, None, ())
    ChangeStateException._ice_type = _M_SmartHome._t_ChangeStateException

    _M_SmartHome.ChangeStateException = ChangeStateException
    del ChangeStateException

if 'ChangeFanSpeedException' not in _M_SmartHome.__dict__:
    _M_SmartHome.ChangeFanSpeedException = Ice.createTempClass()
    class ChangeFanSpeedException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::ChangeFanSpeedException'

    _M_SmartHome._t_ChangeFanSpeedException = IcePy.defineException('::SmartHome::ChangeFanSpeedException', ChangeFanSpeedException, (), False, None, ())
    ChangeFanSpeedException._ice_type = _M_SmartHome._t_ChangeFanSpeedException

    _M_SmartHome.ChangeFanSpeedException = ChangeFanSpeedException
    del ChangeFanSpeedException

if 'State' not in _M_SmartHome.__dict__:
    _M_SmartHome.State = Ice.createTempClass()
    class State(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    State.ON = State("ON", 0)
    State.OFF = State("OFF", 1)
    State._enumerators = { 0:State.ON, 1:State.OFF }

    _M_SmartHome._t_State = IcePy.defineEnum('::SmartHome::State', State, (), State._enumerators)

    _M_SmartHome.State = State
    del State

if 'RGB' not in _M_SmartHome.__dict__:
    _M_SmartHome.RGB = Ice.createTempClass()
    class RGB(object):
        def __init__(self, r=0, g=0, b=0):
            self.r = r
            self.g = g
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.r)
            _h = 5 * _h + Ice.getHash(self.g)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.RGB):
                return NotImplemented
            else:
                if self.r is None or other.r is None:
                    if self.r != other.r:
                        return (-1 if self.r is None else 1)
                else:
                    if self.r < other.r:
                        return -1
                    elif self.r > other.r:
                        return 1
                if self.g is None or other.g is None:
                    if self.g != other.g:
                        return (-1 if self.g is None else 1)
                else:
                    if self.g < other.g:
                        return -1
                    elif self.g > other.g:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RGB)

        __repr__ = __str__

    _M_SmartHome._t_RGB = IcePy.defineStruct('::SmartHome::RGB', RGB, (), (
        ('r', (), IcePy._t_int),
        ('g', (), IcePy._t_int),
        ('b', (), IcePy._t_int)
    ))

    _M_SmartHome.RGB = RGB
    del RGB

if 'OvenMode' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenMode = Ice.createTempClass()
    class OvenMode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    OvenMode.BAKE = OvenMode("BAKE", 0)
    OvenMode.GRILL = OvenMode("GRILL", 1)
    OvenMode.DEFROST = OvenMode("DEFROST", 2)
    OvenMode.WARM = OvenMode("WARM", 3)
    OvenMode._enumerators = { 0:OvenMode.BAKE, 1:OvenMode.GRILL, 2:OvenMode.DEFROST, 3:OvenMode.WARM }

    _M_SmartHome._t_OvenMode = IcePy.defineEnum('::SmartHome::OvenMode', OvenMode, (), OvenMode._enumerators)

    _M_SmartHome.OvenMode = OvenMode
    del OvenMode

if '_t_OvenModes' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_OvenModes = IcePy.defineSequence('::SmartHome::OvenModes', (), _M_SmartHome._t_OvenMode)

_M_SmartHome._t_Lamp = IcePy.defineValue('::SmartHome::Lamp', Ice.Value, -1, (), False, True, None, ())

if 'LampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LampPrx = Ice.createTempClass()
    class LampPrx(Ice.ObjectPrx):

        def getName(self, context=None):
            return _M_SmartHome.Lamp._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_SmartHome.Lamp._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_SmartHome.Lamp._op_getName.end(self, _r)

        def changeState(self, context=None):
            return _M_SmartHome.Lamp._op_changeState.invoke(self, ((), context))

        def changeStateAsync(self, context=None):
            return _M_SmartHome.Lamp._op_changeState.invokeAsync(self, ((), context))

        def begin_changeState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_changeState.begin(self, ((), _response, _ex, _sent, context))

        def end_changeState(self, _r):
            return _M_SmartHome.Lamp._op_changeState.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.Lamp._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Lamp._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Lamp._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LampPrx.ice_checkedCast(proxy, '::SmartHome::Lamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lamp'
    _M_SmartHome._t_LampPrx = IcePy.defineProxy('::SmartHome::Lamp', LampPrx)

    _M_SmartHome.LampPrx = LampPrx
    del LampPrx

    _M_SmartHome.Lamp = Ice.createTempClass()
    class Lamp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Lamp')

        def ice_id(self, current=None):
            return '::SmartHome::Lamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lamp'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def changeState(self, current=None):
            raise NotImplementedError("servant method 'changeState' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LampDisp)

        __repr__ = __str__

    _M_SmartHome._t_LampDisp = IcePy.defineClass('::SmartHome::Lamp', Lamp, (), None, ())
    Lamp._ice_type = _M_SmartHome._t_LampDisp

    Lamp._op_getName = IcePy.Operation('getName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Lamp._op_changeState = IcePy.Operation('changeState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_SmartHome._t_ChangeStateException,))
    Lamp._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_State, False, 0), ())

    _M_SmartHome.Lamp = Lamp
    del Lamp

_M_SmartHome._t_RGBLamp = IcePy.defineValue('::SmartHome::RGBLamp', Ice.Value, -1, (), False, True, None, ())

if 'RGBLampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RGBLampPrx = Ice.createTempClass()
    class RGBLampPrx(_M_SmartHome.LampPrx):

        def setRGB(self, rgb, context=None):
            return _M_SmartHome.RGBLamp._op_setRGB.invoke(self, ((rgb, ), context))

        def setRGBAsync(self, rgb, context=None):
            return _M_SmartHome.RGBLamp._op_setRGB.invokeAsync(self, ((rgb, ), context))

        def begin_setRGB(self, rgb, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RGBLamp._op_setRGB.begin(self, ((rgb, ), _response, _ex, _sent, context))

        def end_setRGB(self, _r):
            return _M_SmartHome.RGBLamp._op_setRGB.end(self, _r)

        def getRGB(self, context=None):
            return _M_SmartHome.RGBLamp._op_getRGB.invoke(self, ((), context))

        def getRGBAsync(self, context=None):
            return _M_SmartHome.RGBLamp._op_getRGB.invokeAsync(self, ((), context))

        def begin_getRGB(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RGBLamp._op_getRGB.begin(self, ((), _response, _ex, _sent, context))

        def end_getRGB(self, _r):
            return _M_SmartHome.RGBLamp._op_getRGB.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RGBLampPrx.ice_checkedCast(proxy, '::SmartHome::RGBLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RGBLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RGBLamp'
    _M_SmartHome._t_RGBLampPrx = IcePy.defineProxy('::SmartHome::RGBLamp', RGBLampPrx)

    _M_SmartHome.RGBLampPrx = RGBLampPrx
    del RGBLampPrx

    _M_SmartHome.RGBLamp = Ice.createTempClass()
    class RGBLamp(_M_SmartHome.Lamp):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Lamp', '::SmartHome::RGBLamp')

        def ice_id(self, current=None):
            return '::SmartHome::RGBLamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RGBLamp'

        def setRGB(self, rgb, current=None):
            raise NotImplementedError("servant method 'setRGB' not implemented")

        def getRGB(self, current=None):
            raise NotImplementedError("servant method 'getRGB' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RGBLampDisp)

        __repr__ = __str__

    _M_SmartHome._t_RGBLampDisp = IcePy.defineClass('::SmartHome::RGBLamp', RGBLamp, (), None, (_M_SmartHome._t_LampDisp,))
    RGBLamp._ice_type = _M_SmartHome._t_RGBLampDisp

    RGBLamp._op_setRGB = IcePy.Operation('setRGB', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_RGB, False, 0),), (), None, (_M_SmartHome._t_WrongRGBvaluesException,))
    RGBLamp._op_getRGB = IcePy.Operation('getRGB', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_RGB, False, 0), ())

    _M_SmartHome.RGBLamp = RGBLamp
    del RGBLamp

_M_SmartHome._t_Oven = IcePy.defineValue('::SmartHome::Oven', Ice.Value, -1, (), False, True, None, ())

if 'OvenPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenPrx = Ice.createTempClass()
    class OvenPrx(Ice.ObjectPrx):

        def getName(self, context=None):
            return _M_SmartHome.Oven._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_SmartHome.Oven._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_SmartHome.Oven._op_getName.end(self, _r)

        def setTemperature(self, temp, context=None):
            return _M_SmartHome.Oven._op_setTemperature.invoke(self, ((temp, ), context))

        def setTemperatureAsync(self, temp, context=None):
            return _M_SmartHome.Oven._op_setTemperature.invokeAsync(self, ((temp, ), context))

        def begin_setTemperature(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_setTemperature.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_SmartHome.Oven._op_setTemperature.end(self, _r)

        def getTemperature(self, context=None):
            return _M_SmartHome.Oven._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.Oven._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.Oven._op_getTemperature.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.Oven._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Oven._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Oven._op_getState.end(self, _r)

        def changeState(self, context=None):
            return _M_SmartHome.Oven._op_changeState.invoke(self, ((), context))

        def changeStateAsync(self, context=None):
            return _M_SmartHome.Oven._op_changeState.invokeAsync(self, ((), context))

        def begin_changeState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_changeState.begin(self, ((), _response, _ex, _sent, context))

        def end_changeState(self, _r):
            return _M_SmartHome.Oven._op_changeState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.OvenPrx.ice_checkedCast(proxy, '::SmartHome::Oven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.OvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Oven'
    _M_SmartHome._t_OvenPrx = IcePy.defineProxy('::SmartHome::Oven', OvenPrx)

    _M_SmartHome.OvenPrx = OvenPrx
    del OvenPrx

    _M_SmartHome.Oven = Ice.createTempClass()
    class Oven(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Oven')

        def ice_id(self, current=None):
            return '::SmartHome::Oven'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Oven'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def setTemperature(self, temp, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def changeState(self, current=None):
            raise NotImplementedError("servant method 'changeState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_OvenDisp)

        __repr__ = __str__

    _M_SmartHome._t_OvenDisp = IcePy.defineClass('::SmartHome::Oven', Oven, (), None, ())
    Oven._ice_type = _M_SmartHome._t_OvenDisp

    Oven._op_getName = IcePy.Operation('getName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Oven._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_WrongTemperaturevaluesException,))
    Oven._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Oven._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_State, False, 0), ())
    Oven._op_changeState = IcePy.Operation('changeState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_SmartHome._t_ChangeStateException,))

    _M_SmartHome.Oven = Oven
    del Oven

_M_SmartHome._t_ModdedOven = IcePy.defineValue('::SmartHome::ModdedOven', Ice.Value, -1, (), False, True, None, ())

if 'ModdedOvenPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ModdedOvenPrx = Ice.createTempClass()
    class ModdedOvenPrx(_M_SmartHome.OvenPrx):

        def setMode(self, mode, context=None):
            return _M_SmartHome.ModdedOven._op_setMode.invoke(self, ((mode, ), context))

        def setModeAsync(self, mode, context=None):
            return _M_SmartHome.ModdedOven._op_setMode.invokeAsync(self, ((mode, ), context))

        def begin_setMode(self, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ModdedOven._op_setMode.begin(self, ((mode, ), _response, _ex, _sent, context))

        def end_setMode(self, _r):
            return _M_SmartHome.ModdedOven._op_setMode.end(self, _r)

        def getMode(self, context=None):
            return _M_SmartHome.ModdedOven._op_getMode.invoke(self, ((), context))

        def getModeAsync(self, context=None):
            return _M_SmartHome.ModdedOven._op_getMode.invokeAsync(self, ((), context))

        def begin_getMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ModdedOven._op_getMode.begin(self, ((), _response, _ex, _sent, context))

        def end_getMode(self, _r):
            return _M_SmartHome.ModdedOven._op_getMode.end(self, _r)

        def getSupportedModes(self, context=None):
            return _M_SmartHome.ModdedOven._op_getSupportedModes.invoke(self, ((), context))

        def getSupportedModesAsync(self, context=None):
            return _M_SmartHome.ModdedOven._op_getSupportedModes.invokeAsync(self, ((), context))

        def begin_getSupportedModes(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ModdedOven._op_getSupportedModes.begin(self, ((), _response, _ex, _sent, context))

        def end_getSupportedModes(self, _r):
            return _M_SmartHome.ModdedOven._op_getSupportedModes.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ModdedOvenPrx.ice_checkedCast(proxy, '::SmartHome::ModdedOven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ModdedOvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ModdedOven'
    _M_SmartHome._t_ModdedOvenPrx = IcePy.defineProxy('::SmartHome::ModdedOven', ModdedOvenPrx)

    _M_SmartHome.ModdedOvenPrx = ModdedOvenPrx
    del ModdedOvenPrx

    _M_SmartHome.ModdedOven = Ice.createTempClass()
    class ModdedOven(_M_SmartHome.Oven):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ModdedOven', '::SmartHome::Oven')

        def ice_id(self, current=None):
            return '::SmartHome::ModdedOven'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ModdedOven'

        def setMode(self, mode, current=None):
            raise NotImplementedError("servant method 'setMode' not implemented")

        def getMode(self, current=None):
            raise NotImplementedError("servant method 'getMode' not implemented")

        def getSupportedModes(self, current=None):
            raise NotImplementedError("servant method 'getSupportedModes' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ModdedOvenDisp)

        __repr__ = __str__

    _M_SmartHome._t_ModdedOvenDisp = IcePy.defineClass('::SmartHome::ModdedOven', ModdedOven, (), None, (_M_SmartHome._t_OvenDisp,))
    ModdedOven._ice_type = _M_SmartHome._t_ModdedOvenDisp

    ModdedOven._op_setMode = IcePy.Operation('setMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_OvenMode, False, 0),), (), None, (_M_SmartHome._t_InvalidOvenModeException,))
    ModdedOven._op_getMode = IcePy.Operation('getMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_OvenMode, False, 0), ())
    ModdedOven._op_getSupportedModes = IcePy.Operation('getSupportedModes', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_OvenModes, False, 0), ())

    _M_SmartHome.ModdedOven = ModdedOven
    del ModdedOven

_M_SmartHome._t_ConvectionOven = IcePy.defineValue('::SmartHome::ConvectionOven', Ice.Value, -1, (), False, True, None, ())

if 'ConvectionOvenPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ConvectionOvenPrx = Ice.createTempClass()
    class ConvectionOvenPrx(_M_SmartHome.ModdedOvenPrx):

        def setFanSpeed(self, speed, context=None):
            return _M_SmartHome.ConvectionOven._op_setFanSpeed.invoke(self, ((speed, ), context))

        def setFanSpeedAsync(self, speed, context=None):
            return _M_SmartHome.ConvectionOven._op_setFanSpeed.invokeAsync(self, ((speed, ), context))

        def begin_setFanSpeed(self, speed, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ConvectionOven._op_setFanSpeed.begin(self, ((speed, ), _response, _ex, _sent, context))

        def end_setFanSpeed(self, _r):
            return _M_SmartHome.ConvectionOven._op_setFanSpeed.end(self, _r)

        def getFanSpeed(self, context=None):
            return _M_SmartHome.ConvectionOven._op_getFanSpeed.invoke(self, ((), context))

        def getFanSpeedAsync(self, context=None):
            return _M_SmartHome.ConvectionOven._op_getFanSpeed.invokeAsync(self, ((), context))

        def begin_getFanSpeed(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ConvectionOven._op_getFanSpeed.begin(self, ((), _response, _ex, _sent, context))

        def end_getFanSpeed(self, _r):
            return _M_SmartHome.ConvectionOven._op_getFanSpeed.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ConvectionOvenPrx.ice_checkedCast(proxy, '::SmartHome::ConvectionOven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ConvectionOvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ConvectionOven'
    _M_SmartHome._t_ConvectionOvenPrx = IcePy.defineProxy('::SmartHome::ConvectionOven', ConvectionOvenPrx)

    _M_SmartHome.ConvectionOvenPrx = ConvectionOvenPrx
    del ConvectionOvenPrx

    _M_SmartHome.ConvectionOven = Ice.createTempClass()
    class ConvectionOven(_M_SmartHome.ModdedOven):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ConvectionOven', '::SmartHome::ModdedOven', '::SmartHome::Oven')

        def ice_id(self, current=None):
            return '::SmartHome::ConvectionOven'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ConvectionOven'

        def setFanSpeed(self, speed, current=None):
            raise NotImplementedError("servant method 'setFanSpeed' not implemented")

        def getFanSpeed(self, current=None):
            raise NotImplementedError("servant method 'getFanSpeed' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ConvectionOvenDisp)

        __repr__ = __str__

    _M_SmartHome._t_ConvectionOvenDisp = IcePy.defineClass('::SmartHome::ConvectionOven', ConvectionOven, (), None, (_M_SmartHome._t_ModdedOvenDisp,))
    ConvectionOven._ice_type = _M_SmartHome._t_ConvectionOvenDisp

    ConvectionOven._op_setFanSpeed = IcePy.Operation('setFanSpeed', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_ChangeFanSpeedException,))
    ConvectionOven._op_getFanSpeed = IcePy.Operation('getFanSpeed', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_SmartHome.ConvectionOven = ConvectionOven
    del ConvectionOven

# End of module SmartHome
